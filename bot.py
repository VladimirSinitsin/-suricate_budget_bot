import numpy as np
import PIL.Image as Image
from typing import Dict, List
from aiogram import Bot
from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.contrib.middlewares.logging import LoggingMiddleware

import db.dbms as db
from bot_config import TOKEN, SELECTED_USERS
from tools import AccessMiddleware, parse_custom_cost_message, scan_qr_image


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏—ë–º–∞ –æ—Ç–≤–µ—Ç–æ–≤-—Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
class Statements(StatesGroup):
    adding_payer = State()


cost = {'–¥–∞—Ç–∞': '',
        '–ø–ª–∞—Ç–µ–ª—å—â–∏–∫': '',
        '—Å—É–º–º–∞': 0.0,
        '–º–∞–≥–∞–∑–∏–Ω': ''}
products = []
individual_products = []


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(AccessMiddleware(SELECTED_USERS))
# dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    # —Å–æ–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = KeyboardButton("/total")
    item2 = KeyboardButton("/help")
    markup.add(item1, item2)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–ª–≥–æ–≤ –¥—Ä—É–≥ –¥—Ä—É–≥—É.\n'
                         '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º –Ω–∞ —á–µ–∫–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏ —Ä–∞—Å—Ö–æ–¥,\n'
                         '–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–∞–∫—Å–∏ - 160.\n\n', reply_markup=markup)


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer('–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @VSinitsin\n'
                         '–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                         '/last_costs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—Ö–æ–¥–æ–≤\n'
                         '/all_costs - –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã\n'
                         '/all_payers - –≤—Å–µ —Å—É—Ä–∏–∫–∞—Ç—ã\n'
                         '/add_payer - –¥–æ–±–∞–≤–∏—Ç—å —Å—É—Ä–∏–∫–∞—Ç–∞\n\n'
                         '/clear_costs - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã\n'
                         '/clear_db - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')


@dp.message_handler(commands=['total'])
async def total(message: types.Message):
    await message.answer(db.total_credit())


async def send_costs(message: types.Message, costs: List):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.
    :param message:
    :param costs: –≤—ã–≤–æ–¥–∏–º—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤.
    :return:
    """
    if not costs:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    else:
        answer = ''
        for cost in costs:
            answer += cost + f" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /del{cost.split(')')[0]}\n\n"
        await message.answer(answer)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –µ–≥–æ id.
@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_cost(message: types.Message):
    row_id = int(message.text[4:])
    db.delete_cost(row_id)
    answer_message = "‚ùå –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª—ë–Ω ‚ùå"
    await message.answer(answer_message)
    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∏–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã.
    await send_costs(message, db.all_costs())


@dp.message_handler(commands=['last_costs'])
async def last_costs(message: types.Message):
    costs = db.all_costs()[-5:]
    await send_costs(message, costs)


@dp.message_handler(commands=['all_costs'])
async def all_costs(message: types.Message):
    costs = db.all_costs()
    await send_costs(message, costs)


@dp.message_handler(commands=['all_payers'])
async def all_payers(message: types.Message):
    payers = db.all_payers()
    if not payers:
        await message.answer("–°—É—Ä–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢")
    else:
        answer = 'üåø –°—É—Ä–∏–∫–∞—Ç—ã:\n\n'
        for payer in payers:
            answer += payer + '\n'
        await message.answer(answer)


@dp.message_handler(commands=['add_payer'])
async def add_payer(message: types.Message):
    await Statements.adding_payer.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞")


# –ü—Ä–∏—ë–º –∏–º–µ–Ω–∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞.
@dp.message_handler(state=Statements.adding_payer)
async def process_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        name = data['text']
        try:
            db.add_payer(name)
        except Exception as e:
            print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: ', e)
            await message.answer(f"üÜò –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n{e}")
        else:
            await message.answer(f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω(-–∞) –≤ —Å–ø–∏—Å–æ–∫ —Å—É—Ä–∏–∫–∞—Ç–æ–≤!")
            if len(db.all_payers()) < 2:
                await message.answer("–°—É—Ä–∏–∫–∞—Ç—É –æ–¥–∏–Ω–æ–∫–æ üò¢\n–î–æ–±–∞–≤—å—Ç–µ –µ–º—É –ø–∞—Ä—É —á–µ—Ä–µ–∑ /add_payer")
            else:
                await message.answer("üíÉ –û–≥–æ! –î–∞ —É –Ω–∞—Å —Ç—É—Ç —Ü–µ–ª–∞—è —Å—É—Ä–∏–∫–∞—á—å—è —Å–µ–º—å—è.\n–ú–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≤–µ–¥–µ–Ω–∏—é –±—é–¥–∂–µ—Ç–∞!")
    await state.finish()


@dp.message_handler(commands=['clear_costs'])
async def clear_all_costs(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    confirmation = InlineKeyboardButton("üö´ –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã üö´", callback_data="–û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
    keyboard.add(confirmation)

    await message.answer("‚ùóÔ∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã? ‚ùóÔ∏è\n"
                         "‚ÄºÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. ‚ÄºÔ∏è\n\n"
                         "(–µ—Å–ª–∏ –í—ã –æ—à–∏–±–ª–∏—Å—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)",
                         reply_markup=keyboard)


# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@dp.callback_query_handler(lambda c: c.data == "–û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
async def confirmed_clear_costs(callback_query: types.CallbackQuery):
    db.delete_all_costs()
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    await callback_query.message.delete_reply_markup()
    await bot.send_message(callback_query.message.chat.id, "‚úÖ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã!")


@dp.message_handler(commands=['clear_db'])
async def clear_db(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    confirmation = InlineKeyboardButton("üö´ –û—á–∏—Å—Ç–∏—Ç—å –ë–î üö´", callback_data="–û—á–∏—Å—Ç–∏—Ç—å –ë–î")
    keyboard.add(confirmation)

    await message.answer("‚ùóÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ë–î) –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç —Å–ø–∏—Å–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤. ‚ùóÔ∏è\n"
                         "‚Äº –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ë–î? ‚Äº\n\n"
                         "(–µ—Å–ª–∏ –í—ã –æ—à–∏–±–ª–∏—Å—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)",
                         reply_markup=keyboard)


# –£–¥–∞–ª–µ–Ω–∏–µ –ë–î, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@dp.callback_query_handler(lambda c: c.data == "–û—á–∏—Å—Ç–∏—Ç—å –ë–î")
async def confirmed_clear_db(callback_query: types.CallbackQuery):
    db.delete_db()
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    await callback_query.message.delete_reply_markup()
    await bot.send_message(callback_query.message.chat.id, "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")


async def get_keyboard_payers(alias: str) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞–º–∏.
    :alias: –ø—Å–µ–≤–¥–æ–Ω–∏–º, –¥–æ–±–∞–≤—è–µ–º—ã–π –ø–µ—Ä–µ–¥ callback_data —É –∫–Ω–æ–ø–æ–∫.
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞–º–∏.
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    for payer in db.all_payers():
        button = InlineKeyboardButton(payer, callback_data=str(alias+payer))
        keyboard.insert(button)
    return keyboard


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ —É –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞.
@dp.callback_query_handler(lambda c: c.data[:6] == 'simple')
async def select_payer_simple(callback_query: types.CallbackQuery):
    global cost

    cost['–ø–ª–∞—Ç–µ–ª—å—â–∏–∫'] = callback_query.data[7:]
    db.add_cost(cost)

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞.
    await callback_query.message.delete_reply_markup()
    await bot.send_message(callback_query.message.chat.id,
                           f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ—Ç {cost['–¥–∞—Ç–∞']} –≤ {cost['–º–∞–≥–∞–∑–∏–Ω']} "
                           f"–Ω–∞ —Å—É–º–º—É {cost['—Å—É–º–º–∞']} —Ä—É–±–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å—Ö–æ–¥—ã, "
                           f"–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª(-–∞) {cost['–ø–ª–∞—Ç–µ–ª—å—â–∏–∫']}.")


# –†–∞—Å—Ö–æ–¥, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤—Ä—É—á–Ω—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä, "—Ç–∞–∫—Å–∏ - 160".
@dp.message_handler(content_types=["text"])
async def add_custom_cost(message: types.Message):
    global cost

    if len(db.all_payers()) < 2:
        await message.answer("‚ö†Ô∏è –°—É—Ä–∏–∫–∞—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–æ–µ. ‚ö†Ô∏è\n"
                             "–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_payer")
    else:
        try:
            cost = parse_custom_cost_message(message.text)
        except Exception as e:
            print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: ', e)
            await message.answer("üÜò –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n"
                                 "‚ö† –í–≤–æ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –≤–∏–¥–µ –ú–ê–ì–ê–ó–ò–ù - –°–¢–û–ò–ú–û–°–¢–¨. ‚ö†")
        else:
            await message.answer("–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∫—É? üßê", reply_markup=await get_keyboard_payers(alias='simple_'))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å qr-–∫–æ–¥–æ–º.
@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message: types.Message):
    global cost
    global products

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ io.BytesIO.
    bytes_of_photo = await bot.download_file_by_id(message.photo[-1].file_id)

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ numpy –º–∞—Å—Å–∏–≤—É.
    img = Image.open(bytes_of_photo)
    img = np.array(img)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ qr-–∫–æ–¥–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—Ö–æ–¥ –≥–ª–æ–±–∞–ª—å–Ω—ã–π).
        ticket_data = await scan_qr_image(img)
        is_simple, products = await parse_ticket(ticket_data)
    except Exception as e:
        print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: ', e)
        await message.answer(f"üÜò –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n{e}")
        return

    # –ï—Å–ª–∏ —á–µ–∫ –ø—Ä–æ—Å—Ç–æ–π (–Ω–µ–ª—å–∑—è —Å—á–∏—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ—Ç–¥–µ–ª—å–Ω–æ), —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ä–∞—Å—Ö–æ–¥.
    if is_simple:
        await message.answer("–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫ ü•∫\n\n"
                             f"–ß–µ–∫ –∏–∑ {cost['–º–∞–≥–∞–∑–∏–Ω']} –Ω–∞ —Å—É–º–º—É {cost['—Å—É–º–º–∞']}.\n\n"
                             "–ù–æ —è –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —Å—É–º–º—É –≤ –Ω—ë–º –∫–∞–∫ –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ (–ø–æ–ø–æ–ª–∞–º).\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∫—É.", reply_markup=await get_keyboard_payers(alias='simple_'))
    else:
        keyboard = InlineKeyboardMarkup(row_width=2)
        button1 = InlineKeyboardButton("‚ùáÔ∏è –ü–æ–ø–æ–ª–∞–º", callback_data="–ü–æ–ø–æ–ª–∞–º")
        button2 = InlineKeyboardButton("üÜö –£—Ç–æ—á–Ω–∏—Ç—å", callback_data="–£—Ç–æ—á–Ω–∏—Ç—å")
        keyboard.add(button1, button2)
        await message.answer("üíô –û—Ç–ª–∏—á–Ω–æ! –ú–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ–∫.\n\n"
                             f"–ß–µ–∫ –∏–∑ {cost['–º–∞–≥–∞–∑–∏–Ω']} –Ω–∞ —Å—É–º–º—É {cost['—Å—É–º–º–∞']}.\n\n"
                             "–ï—Å–ª–∏ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—â–∏–µ, —Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å —Å—É–º–º—É —á–µ–∫–∞ –Ω–∞ –¥–≤–æ–∏—Ö –ø–æ–ø–æ–ª–∞–º ‚ùáÔ∏è\n"
                             "–ò–Ω–∞—á–µ, –í—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ üÜö", reply_markup=keyboard)


async def parse_ticket(data: Dict) -> (bool, List):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ–∫–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥.
    :param data: –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ qr-–∫–æ–¥–∞ —á–µ–∫–∞.
    :return: —è–≤–ª—è—è–µ—Ç—Å—è –ª–∏ —á–µ–∫ "–ø—Ä–æ—Å—Ç—ã–º"; —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    """
    global cost

    if not data:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å qr-–∫–æ–¥, —á–µ–∫ –ø—É—Å—Ç–æ–π.")
    if len(db.all_payers()) < 2:
        raise Exception("‚ö†Ô∏è –°—É—Ä–∏–∫–∞—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–æ–µ. ‚ö†Ô∏è\n"
                        "–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_payer")

    date = data['operation']['date']
    day, time = date.split('T')
    y, m, d = day.split('-')
    cost['–¥–∞—Ç–∞'] = f"{d}/{m} {time}"

    cost['—Å—É–º–º–∞'] = int(data['operation']['sum'])/100

    if 'ticket' not in data:
        is_simple = True
        cost['–º–∞–≥–∞–∑–∏–Ω'] = "_–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ_"
        products = []
        return is_simple, products

    is_simple = False
    # –í —Å—Ç–∞—Ä—ã—Ö —á–µ–∫–∞—Ö –Ω–µ—Ç –ø–æ–ª—è retailPlace, –ø–æ—ç—Ç–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Ä—ë–º –∏–∑ ['seller']['name'].
    if 'retailPlace' not in data['ticket']['document']['receipt']:
        cost['–º–∞–≥–∞–∑–∏–Ω'] = data['seller']['name']
    else:
        cost['–º–∞–≥–∞–∑–∏–Ω'] = data['ticket']['document']['receipt']['retailPlace']
    products = await parse_items(data['ticket']['document']['receipt']['items'])
    return is_simple, products


async def parse_items(items: List) -> List:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã.
    :param items: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤-—Å–ª–æ–≤–∞—Ä–µ–π.
    :return: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤-—Å–ø–∏—Å–æ–≤ (0 - –Ω–∞–∑–≤–∞–Ω–∏–µ, 1 - —Å—É–º–º–∞).
    """
    products = []
    for item in items:
        products.append([item['name'], int(item['sum'])/100])
    return products


# –ï—Å–ª–∏ –≤ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —á–µ–∫–µ –Ω–µ –±—ã–ª–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.
@dp.callback_query_handler(lambda c: c.data == "–ü–æ–ø–æ–ª–∞–º")
async def half_ticket(callback_query: types.CallbackQuery):
    global cost

    cost['—Å—É–º–º–∞'] = cost['—Å—É–º–º–∞'] / 2
    await bot.send_message(callback_query.message.chat.id, "–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∫—É? üßê",
                           reply_markup=await get_keyboard_payers(alias='simple_'))


# –ï—Å–ª–∏ –≤ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —á–µ–∫–µ –±—ã–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏.
@dp.callback_query_handler(lambda c: c.data == "–£—Ç–æ—á–Ω–∏—Ç—å")
async def individual_ticket(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.message.chat.id, "–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∫—É? üßê",
                           reply_markup=await get_keyboard_payers(alias='ticket_'))


# –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É–∑–Ω–∞–ª–∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞.
@dp.callback_query_handler(lambda c: c.data[:6] == 'ticket')
async def select_payer_simple(callback_query: types.CallbackQuery):
    global cost
    global individual_products

    individual_products = []

    await callback_query.message.delete_reply_markup()

    cost['–ø–ª–∞—Ç–µ–ª—å—â–∏–∫'] = callback_query.data[7:]

    await bot.send_message(callback_query.message.chat.id, "üÜö –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.\n"
                                                           "üí§ –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –æ–±—â–∏–π, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ.\n"
                                                           "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ ‚úÖ")

    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞.
    # –í callback_data –¥–µ–ª–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞.
    for index, product in enumerate(products):
        name, sum = product
        await bot.send_message(callback_query.message.chat.id, f"{sum} - {name}",
                               reply_markup=await get_keyboard_payers(alias=f'{index}_'))

    ending_keyboard = InlineKeyboardMarkup(row_width=1)
    button = InlineKeyboardButton('‚úÖ –ó–∞–≤—Ä–µ—à–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ', callback_data='–ó–∞–≤—Ä–µ—à–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ')
    ending_keyboard.add(button)
    await bot.send_message(callback_query.message.chat.id, "–ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                           reply_markup=ending_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
@dp.callback_query_handler(lambda c: c.data.split('_')[0].isdigit())
async def select_payer_product(callback_query: types.CallbackQuery):
    product_index = int(callback_query.data.split('_')[0])
    current_product = products[product_index]
    product_name, sum = current_product
    payer = callback_query.data.split('_')[1]

    # –ï—Å–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã—á–∏—Ç–∞–µ–º –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã.
    # –ò–Ω–∞—á–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø—Ä–∏–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.
    cost['—Å—É–º–º–∞'] -= sum
    if payer != cost['–ø–ª–∞—Ç–µ–ª—å—â–∏–∫']:
        individual_products.append(current_product)

    await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data == "–ó–∞–≤—Ä–µ—à–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ")
async def ending_ticket(callback_query: types.CallbackQuery):
    global cost
    global individual_products

    # –î–µ–ª–∏–º –æ–±—â—É—é (–±–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤) —Å—É–º–º—É –ø–æ–ø–æ–ª–∞–º.
    cost['—Å—É–º–º–∞'] = cost['—Å—É–º–º–∞'] / 2
    # –ò –ø—Ä–∏–±—ã–≤–ª—è–µ–º —Å—É–º–º—É –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Ç–æ–≥–æ, –∫—Ç–æ –Ω–µ –ø–ª–∞—Ç–∏–ª.
    for product in individual_products:
        _, sum = product
        cost['—Å—É–º–º–∞'] += sum

    db.add_cost(cost)

    await callback_query.message.delete_reply_markup()
    await bot.send_message(callback_query.message.chat.id,
                           f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ—Ç {cost['–¥–∞—Ç–∞']} –≤ {cost['–º–∞–≥–∞–∑–∏–Ω']} "
                           f"–Ω–∞ —Å—É–º–º—É {cost['—Å—É–º–º–∞']} —Ä—É–±–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å—Ö–æ–¥—ã, "
                           f"–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª(-–∞) {cost['–ø–ª–∞—Ç–µ–ª—å—â–∏–∫']}.")


if __name__ == '__main__':
    executor.start_polling(dp)
