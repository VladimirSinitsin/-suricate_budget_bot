from aiogram import Bot
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import db.dbms as db
from bot_config import TOKEN, SELECTED_USERS
from tools import AccessMiddleware, parse_custom_cost_message


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏—ë–º–∞ –æ—Ç–≤–µ—Ç–æ–≤-—Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
class Statements(StatesGroup):
    adding_payer = State()


custom_cost = {'–¥–∞—Ç–∞': None,
               '–ø–ª–∞—Ç–µ–ª—å—â–∏–∫': None,
               '—Å—É–º–º–∞': None,
               '–º–∞–≥–∞–∑–∏–Ω': None}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
# dp.middleware.setup(LoggingMiddleware())
dp.middleware.setup(AccessMiddleware(SELECTED_USERS))


@dp.message_handler(commands=['start'])
async def send_welcome(message):
    # —Å–æ–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = KeyboardButton("/total")
    item2 = KeyboardButton("/help")
    markup.add(item1, item2)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–ª–≥–æ–≤ –¥—Ä—É–≥ –¥—Ä—É–≥—É.\n'
                         '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º –Ω–∞ —á–µ–∫–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏ —Ä–∞—Å—Ö–æ–¥,\n'
                         '–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–∞–∫—Å–∏ - 160.\n\n', reply_markup=markup)


@dp.message_handler(commands=['help'])
async def send_help(message):
    await message.answer('–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @VSinitsin\n'
                         '–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                         '/last_costs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—Ö–æ–¥–æ–≤\n'
                         '/all_costs - –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã\n'
                         '/all_payers - –≤—Å–µ —Å—É—Ä–∏–∫–∞—Ç—ã\n'
                         '/add_payer - –¥–æ–±–∞–≤–∏—Ç—å —Å—É—Ä–∏–∫–∞—Ç–∞\n\n'
                         '/clear_costs - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã\n'
                         '/clear_db - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')


@dp.message_handler(commands=['total'])
async def total(message):
    await message.answer(db.total_credit())


async def send_costs(message, costs):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.
    :param message:
    :param costs: –≤—ã–≤–æ–¥–∏–º—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤.
    :return:
    """
    if not costs:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    else:
        answer = ''
        for cost in costs:
            answer += cost + f" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /del{cost.split(')')[0]}\n\n"
        await message.answer(answer)


@dp.message_handler(commands=['last_costs'])
async def last_costs(message):
    costs = db.all_costs()[-5:]
    await send_costs(message, costs)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –µ–≥–æ id.
@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_cost(message):
    row_id = int(message.text[4:])
    db.delete_cost(row_id)
    answer_message = "‚ùå –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª—ë–Ω ‚ùå"
    await message.answer(answer_message)


@dp.message_handler(commands=['all_costs'])
async def all_costs(message):
    costs = db.all_costs()
    await send_costs(message, costs)


@dp.message_handler(commands=['all_payers'])
async def all_payers(message):
    payers = db.all_payers()
    if not payers:
        await message.answer("–°—É—Ä–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢")
    else:
        answer = '–°—É—Ä–∏–∫–∞—Ç—ã:\n\n'
        for payer in payers:
            answer += payer + '\n'
        await message.answer(answer)


@dp.message_handler(commands=['add_payer'])
async def add_payer(message):
    await Statements.adding_payer.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞")


# –ü—Ä–∏—ë–º –∏–º–µ–Ω–∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞.
@dp.message_handler(state=Statements.adding_payer)
async def process_message(message, state):
    async with state.proxy() as data:
        data['text'] = message.text
        name = data['text']
        try:
            db.add_payer(name)
        except Exception as e:
            print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: ', e)
            await message.answer(f"üÜò –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")
        else:
            await message.answer(f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω(-–∞) –≤ —Å–ø–∏—Å–æ–∫ —Å—É—Ä–∏–∫–∞—Ç–æ–≤!")
            if len(db.all_payers()) < 2:
                await message.answer("–°—É—Ä–∏–∫–∞—Ç—É –æ–¥–∏–Ω–æ–∫–æ üò¢\n–î–æ–±–∞–≤—å—Ç–µ –µ–º—É –ø–∞—Ä—É —á–µ—Ä–µ–∑ /add_payer")
            else:
                await message.answer("üíÉ –û–≥–æ! –î–∞ —É –Ω–∞—Å —Ç—É—Ç —Ü–µ–ª–∞—è —Å—É—Ä–∏–∫–∞—á—å—è —Å–µ–º—å—è.\n–ú–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≤–µ–¥–µ–Ω–∏—é –±—é–¥–∂–µ—Ç–∞!")
    await state.finish()


@dp.message_handler(commands=['clear_costs'])
async def clear_all_costs(message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    confirmation = InlineKeyboardButton("üö´ –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã üö´", callback_data="–û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
    keyboard.add(confirmation)

    await message.answer("‚ùóÔ∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã? ‚ùóÔ∏è\n"
                         "‚ÄºÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. ‚ÄºÔ∏è\n\n"
                         "(–µ—Å–ª–∏ –í—ã –æ—à–∏–±–ª–∏—Å—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)",
                         reply_markup=keyboard)


# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@dp.callback_query_handler(lambda c: c.data == "–û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
async def confirmed_clear_costs(callback_query):
    db.delete_all_costs()
    await bot.send_message(callback_query.message.chat.id, "‚úÖ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã!")


@dp.message_handler(commands=['clear_db'])
async def clear_db(message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    confirmation = InlineKeyboardButton("üö´ –û—á–∏—Å—Ç–∏—Ç—å –ë–î üö´", callback_data="–û—á–∏—Å—Ç–∏—Ç—å –ë–î")
    keyboard.add(confirmation)

    await message.answer("‚ùóÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ë–î) –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç —Å–ø–∏—Å–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤. ‚ùóÔ∏è\n"
                         "‚Äº –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ë–î? ‚Äº\n\n"
                         "(–µ—Å–ª–∏ –í—ã –æ—à–∏–±–ª–∏—Å—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)",
                         reply_markup=keyboard)


# –£–¥–∞–ª–µ–Ω–∏–µ –ë–î, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@dp.callback_query_handler(lambda c: c.data == "–û—á–∏—Å—Ç–∏—Ç—å –ë–î")
async def confirmed_clear_db(callback_query):
    db.delete_db()
    await bot.send_message(callback_query.message.chat.id, "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")


async def get_keyboard_payers(alias):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞–º–∏.
    :alias: –ø—Å–µ–≤–¥–æ–Ω–∏–º, –¥–æ–±–∞–≤—è–µ–º—ã–π –ø–µ—Ä–µ–¥ callback_data —É –∫–Ω–æ–ø–æ–∫.
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞–º–∏.
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    for payer in db.all_payers():
        button = InlineKeyboardButton(payer, callback_data=str(alias+payer))
        keyboard.add(button)
    return keyboard


@dp.message_handler(content_types=["text"])
async def add_custom_cost(message):
    global custom_cost

    if len(db.all_payers()) < 2:
        await message.answer("‚ö†Ô∏è –°—É—Ä–∏–∫–∞—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–æ–µ. ‚ö†Ô∏è\n"
                             "–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_payer")
    else:
        try:
            custom_cost = parse_custom_cost_message(message.text)
        except Exception as e:
            print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: ', e)
            await message.answer("üÜò –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n"
                                 "‚ö† –í–≤–æ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –≤–∏–¥–µ –ú–ê–ì–ê–ó–ò–ù - –°–¢–û–ò–ú–û–°–¢–¨. ‚ö†")
        else:
            await message.answer("–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∫—É? üßê", reply_markup=await get_keyboard_payers(alias='custom_'))


@dp.callback_query_handler(lambda c: c.data[:6] == 'custom')
async def select_payer(callback_query):
    global custom_cost

    custom_cost['–ø–ª–∞—Ç–µ–ª—å—â–∏–∫'] = callback_query.data[7:]
    db.add_cost(custom_cost)

    await bot.send_message(callback_query.message.chat.id,
                           f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ—Ç {custom_cost['–¥–∞—Ç–∞']} –≤ {custom_cost['–º–∞–≥–∞–∑–∏–Ω']} "
                           f"–Ω–∞ —Å—É–º–º—É {custom_cost['—Å—É–º–º–∞']} —Ä—É–±–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å—Ö–æ–¥—ã, "
                           f"–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª(-–∞) {custom_cost['–ø–ª–∞—Ç–µ–ª—å—â–∏–∫']}.")


if __name__ == '__main__':
    executor.start_polling(dp)
